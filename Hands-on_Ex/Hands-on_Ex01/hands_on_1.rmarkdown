---
title: "Hands On Exercise 1: Geospatial Data Science with R"
author: "Yozafard Harold Siauheming"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      eval = TRUE,
                      message = FALSE,
                      warning = FALSE)
```


## Overview

In this course, we are learning about Geospatial Analytics and Applications. Geospatial Data Science is the process of importing, wrangling, integrating, and processing geographic datasets.

In this exercise, we are looking into some geospatial data science tasks using R, specifically the sf packages.

## Dataset

We will be using 4 publicly available datasets: - Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/) - Pre-Schools Location from [data.gov.sg](https://data.gov.sg/) - Cycling Path from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html) - Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)

## Setup

### Package Import

We will be using sf to process geospatial data, along with tidyverse for data wrangling


```{r}
#Importing Packages
pacman::p_load(sf, tidyverse)
```


### Data Loading

We can load data using the st_read() function


```{r}
#Loading data
mpsz = st_read(dsn = "./data/geospatial", 
                  layer = "MP14_SUBZONE_WEB_PL")
cyclingpath = st_read(dsn = "./data/geospatial", 
                  layer = "CyclingPathGazette")
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")

```


### EDA

It is good practice to explore the dataset to understand more about its characteristic before performing deep analysis


```{r}
#Exploring mpsz data
st_geometry(mpsz)
glimpse(mpsz)
head(mpsz, n=5)
```

```{r}
#Plotting mpsz data
plot(mpsz)
plot(st_geometry(mpsz))
plot(mpsz["PLN_AREA_N"])
```


## Projecting Geospatial Data

To perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system. That's where projection comes into play


```{r}
#Projecing mpsz data
st_crs(mpsz)
mpsz3414 <- st_set_crs(mpsz, 3414)
st_crs(mpsz3414)
```

```{r}
#Transforming preschool data to syv21
preschool3414 <- st_transform(preschool, crs = 3414)
```

```{r}
#Importing and converting aspatial data
listings <- read_csv("data/aspatial/listings.csv")
list(listings)
```

```{r}
#Creating simple feature data frame
listings_sf <- st_as_sf(listings, coords = c("longitude", "latitude"), crs=4326) |> st_transform(crs = 3414)
glimpse(listings_sf)
```


## Geoprocessing with sf package

### Buffering

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths


```{r}
#Buffering
buffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs = 30)
buffer_cycling$AREA <- st_area(buffer_cycling)
sum(buffer_cycling$AREA)
```


### Point-in-polygon Count

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.


```{r}
#Counting points in polygon
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
summary(mpsz3414$`PreSch Count`)
top_n(mpsz3414, 1, `PreSch Count`)
```

```{r}
#Density of pre-school by planning subzone

#Derive each area of each planning subzone
mpsz3414$Area <- mpsz3414 |> st_area()

#Compute density with mutate
mpsz3414 <- mpsz3414 %>% mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)

#Plotting mpsz3414
ggplot(data=mpsz3414, aes(x= as.numeric(`PreSch Density`)))+ geom_histogram(bins=20, color="black", fill="light blue") + labs(title = "Are pre-school even distributed in Singapore?", subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools", x = "Pre-school density (per km sq)", y = "Frequency")

ggplot(data=mpsz3414, aes(y = `PreSch Count`, x= as.numeric(`PreSch Density`)))+ geom_point(color="black", fill="light blue") + xlim(0, 40) + ylim(0, 40) + labs(title = "", x = "Pre-school density (per km sq)", y = "Pre-school count")
```

