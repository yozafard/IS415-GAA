[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "Welcome to IS415 Geospatial Analytics and Applications\nThis is the course website of IS415 I study this term. You will find my course work on this website.\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/hands_on_3_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/hands_on_3_2.html",
    "title": "Hands On Exercise 3.2: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "",
    "text": "Let’s start with learning what spatial point analysis is. Spatial point analysis is the evaluation of a pattern or distribution of a set points referring to location on a surface. These points can be the location of: - An event (crime, accident, disease, etc) - A business service (coffee shop, supermarket, etc)\nIn this lesson, we will be using the spatstat library to answer these questions:\n\nare the childcare centres in Singapore randomly distributed throughout the country?\nif the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/hands_on_3_2.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/hands_on_3_2.html#overview",
    "title": "Hands On Exercise 3.2: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "",
    "text": "Let’s start with learning what spatial point analysis is. Spatial point analysis is the evaluation of a pattern or distribution of a set points referring to location on a surface. These points can be the location of: - An event (crime, accident, disease, etc) - A business service (coffee shop, supermarket, etc)\nIn this lesson, we will be using the spatstat library to answer these questions:\n\nare the childcare centres in Singapore randomly distributed throughout the country?\nif the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/hands_on_3_2.html#datasets",
    "href": "Hands-on_Ex/Hands-on_Ex03/hands_on_3_2.html#datasets",
    "title": "Hands On Exercise 3.2: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Datasets",
    "text": "Datasets\nThere are 3 datasets to be used - CHILDCARE, a point feature data providing both location and attribute information of childcare centres. It was downloaded from data.gov.sg and is in geojson format. - MP14_SUBZONE_WEB_PL, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from data.gov.sg. - CostalOutline, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/hands_on_3_2.html#packages-setup",
    "href": "Hands-on_Ex/Hands-on_Ex03/hands_on_3_2.html#packages-setup",
    "title": "Hands On Exercise 3.2: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Packages Setup",
    "text": "Packages Setup\nWe are using 5 packages: - sf for processing geospatial data in R - spatstat for point pattern analysis - raster for processing gridded spatial data. We will use raster to convert the image output from spatsat to a raster format - maptools for manipulating geospatial data. We mainly use it to conver spatial data into ppp format of spatstat - tmap to plot point pattern maps\n\npacman::p_load(maptools, sf, raster, spatstat, tmap)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/hands_on_3_2.html#spatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex03/hands_on_3_2.html#spatial-data-wrangling",
    "title": "Hands On Exercise 3.2: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Spatial Data Wrangling",
    "text": "Spatial Data Wrangling\n\nImporting Data\nWe are using st_read() and st_transform() to load 3 data sets to R\n\n#Childcare Data\nchildcare_sf &lt;- st_read(\"../Hands-on_Ex03/data/ChildCareServices.geojson\") |&gt; st_transform(crs=3414)\n\nReading layer `ChildCareServices' from data source \n  `C:\\Users\\yozaf\\SMUY3S2\\Geospatial\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data\\ChildCareServices.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n#Coastal Outline\nsg_sf &lt;- st_read('../Hands-on_Ex03/data', layer='CostalOutline')\n\nReading layer `CostalOutline' from data source \n  `C:\\Users\\yozaf\\SMUY3S2\\Geospatial\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\n#MPSZ\nmpsz_sf &lt;- st_read('../Hands-on_Ex03/data', layer='MP14_SUBZONE_WEB_PL')\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\yozaf\\SMUY3S2\\Geospatial\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex03\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nRetrieve the referencing system information of these geospatial data\nWe can use st_crs() to retrieve the referencing system information\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nWe can see that childcare_sf is in WGS84, while mpsz_sf and sg_sf is in SVY21. To address this, we can use the st_transform()\n\nmpsz_sf &lt;- st_transform(mpsz_sf, crs= 3414)\nsg_sf &lt;- st_transform(sg_sf, crs= 3414)\n\nNow let’s check their new referencing system information\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\nMapping The Data\nTo see their spatial patterns, we can explore plotting the data using tmap functions\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(sg_sf) + tm_polygons() +\n  tm_shape(mpsz_sf) + tm_polygons() + \n    tm_shape(childcare_sf) + tm_dots()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/hands_on_3_2.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex03/hands_on_3_2.html#geospatial-data-wrangling",
    "title": "Hands On Exercise 3.2: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\nWe have experienced the use of simple feature data frames. However, sometimes we need to use the data in a sp’s Spatial* classes\n\nConverting sf data frames to sp’s Spatial* class\nWe will be using as_Spatial() function from sf package\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\nTo display the information of these 3 spatial classes:\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1925 \nextent      : 11810.03, 45404.24, 25596.33, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;100044&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;44, TELOK BLANGAH DRIVE, #01 - 19/51, SINGAPORE 100044&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;PCF SPARKLETOTS PRESCHOOL @ TELOK BLANGAH BLK 44 (CC)&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;349C54F201805938&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                                            &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;99982&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;35, ALLANBROOKE ROAD, SINGAPORE 099982&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;ISLANDER PRE-SCHOOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;4F63ACF93EFABE7F&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093837&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\n\n\nConverting Spatial* class to generic sp format\nspatstat requires the data to be in ppp object form. However, there is no direct way to convert Spatial* class to ppp object. So, we need to convert it to Spatial objects first\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\n\nTo show the object properties\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1925 \nextent      : 11810.03, 45404.24, 25596.33, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\n\nConverting Generic sp Format to spatstat’s ppp Format\n\nchildcare_ppp &lt;- as(childcare_sp, 'ppp')\nchildcare_ppp\n\nPlanar point pattern: 1925 points\nwindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n\n\nLet’s see what the difference is in a plot\n\nplot(childcare_ppp)\n\n\n\n\nTo get the summary statistics, we can use this code\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1925 points\nAverage intensity 2.417323e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n                    (33590 x 23700 units)\nWindow area = 796335000 square units\n\n\n\n\nHandling duplicated points\nWe can check if there are any duplicates with this\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nTo count the number of co-incidence points, we can use the multiplicity() function\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    2    1    1    1    1    2    1    1    1    1    1    1    3    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    4    1    1    1    1    1    1    1    1    1    1    2 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    2    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    3    1    1    1    2    1   10    1    1    1    1    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    2    1    1    3    1    1    1    2    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    2    2    2    1    1    1    1    1    1    1    1    2    1    1    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    3    1    1    1    1    1    1    1    1    1    1 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    2    2    2    1    1    1    1    1    2    1    4    1    1    2 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   3    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   1    1    1    1    1   10    1    1    3    1    1    1    1    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    2    6    1    2    1    1    2    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   3    2    3    2    1    2    1    1    2    4    1    6    6    1    1    1 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   2    1    1    1    1    2    1    1    1    1    1    1    3    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    4    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    2    1    1    1    2    1    1    1    2    1    1    1    1    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    2    1    2    2    1    1    1    1    2    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   4    1    1    1    1    2    1    1    1    1    1    1    2    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   2    2    1    1    1    1    1   10    1    2    1    1    1    2    1    3 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1   10   10   10    1    1    1    1    1    1    1    1    1 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    2    1    2    1    1    1    1    3    1    2    1    1    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    3    1    1    1    1    1    2    1    1    2 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    3    1    1    1    1    1    1    1    1    2    2    2    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    3    1    1    1    2    1    1    1    2    2    1    1    1    1    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    4    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   1    1    1    1    1    3    1    1    1    1    1    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    4    1    1    1    1    1    1    4    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    2    1    1 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    3    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    1    1    1    1   10    1    1    1    1    1    2 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    1    2    1    2    1   10    1    4    1    2    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   3    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    3    1    1    3    1    1    1    1    2    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    2 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    2    1    1    1    1    1    2    2    1    1    1    1    2    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    2    1    2    1    1    1    2    1    1    1    2    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    2    1    1    2    1    1    1    1    1    1    1    1    2    1 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    2    2    1    1    1    1    2    1    1    1    1    2    1    1    2 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    2    4    1    1    1    1    1    1    2    1    2    2    2 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   2    1    1    1    1    2    1    1    2    2    2    2    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   2    1    1    1    2    1    2    1    1    1    1    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    2    2    2    1    1    1    1    1    2    1    1    2    2    2    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    2    1    1    2    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   2    1    2    1    2    1    1    1    1    1    1    2    2    1    1    2 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    2    1    2    1    2    1    1    1    1    1    2    1    1    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    2    1    2    2    2    2    2    1    1    1    1    1    2    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    2    1    1    2    1    1    1    1    2    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    2    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    3    1    1    1    1    1    1    1   10 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   2    1    3    2    1    2    1    1    2    3    2    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    2    1    2    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    4    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   2    1    1    1    2    1    2    1    1    1    1    1    1    1    1    1 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n  10    1    2    4    1    1    1    4    1    4    1    1    1    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    1    1    1    1    1    4    2    3    2    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   2    2    1    1    1    1    1    2    2    3    1    1    1    1    1    2 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   2    2    2    1    1    1    6    1    1    1    1    1    1    1    1    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    1    1    4    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    2    2    1    1    1    1    1    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    2    1    1    1    1    2    1    1    1    1    2    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   2    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   2    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 \n   1    1    1    1    1    1    1    1    1    6    1    1    1    1    1    1 \n1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 \n   1    1    1    1    1    1    1    3    1    1    4    1    1    2    1    1 \n1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 \n   2    1    1    1    2    1    4    1    2    1    1    1    1    1    1    1 \n1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 \n   1    1    1    1    1    1    1    1    2    1    1    2    1    1    1    1 \n1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 \n   1    1    1    1    2    1    1    3    1    1    1    2    1    1    1    1 \n1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 \n   2    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 \n   3    1    1    2    1    1    1    1    1    1    1    1    1    2    1    1 \n1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 \n   1    1    1    4    1    1    1    6    1    1    1    1    1    1    1    1 \n1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 \n   1    1    1    2    1    1    1    2    1    1    1    1    1    2    1    1 \n1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 \n   1    2    1    1    1    1    1    1    1    1    2    2    2    1    1    1 \n1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 \n   2    1    2    1    2    1    2    1    1    2    1    2    2    2    2    1 \n1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 \n   1    1    1    1    1    2    1    1    1    2    1    1    1    1    2    1 \n1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 \n   1    4    1    4    1    4    1    1    2    1    1    1    1    1    3    1 \n1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 \n   1    1    1    2    2    2    2    2    2    2    2    1    1    2    2    2 \n1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 \n   1    2    1    1    1    1    1    2    2    2    1    2    2    2    2    1 \n1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 \n   2    1    1    1    1    1    1    1    2    2    1    2    1    1    1    1 \n1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 \n   1    1    1    1    2    1    2    2    2    2    2    2    1    1    2    1 \n1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 \n   1    1    1    2    2    2    2    2    1    1    1    2    1    1    2    2 \n1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 \n   1    2    1    1    2    1    1    2    2    2    1    2    1    2    1    1 \n1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 \n   1    1    1    1    1    1    2    1    1    1    1    4    1    1    1    1 \n1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 \n   3    1    1    2    1    1    1    2    1    1    1    1    1    2    2    1 \n1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 \n   1    1    2    1    2    2    1    1    1    1    1    2    1    1    2    1 \n1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 \n   1    3    2    2    2    1    2    1    3    1    1    1    1    1    1    1 \n1921 1922 1923 1924 1925 \n   1    1    1    1    3 \n\n\nTo see how many locations have more than one point event, sum up the multiplicity\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 338\n\n\nNow, we can plot out where these duplicate point events are\n\ntmap_mode('view')\ntm_shape(childcare) + tm_dots(alpha=0.4, size=0.05)\n\n\n\n\n\n\n\n#Change back the mode to 'plot' to save up on resources\ntmap_mode('plot')\n\nTo overcome duplicates, there are three main ways: 1. Delete the duplicates: loss of useful point events 2. Jittering: add a small perturbation to the duplicate points so that they do not occupy the exact same space 3. Make each point “unique” and then attach the duplicates of the points to the patterns as marks, as attributes of the points. Then you would need analytical techniques that take into account these marks\nThis code chunk implements the jittering approach\n\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\nAfter implementing the jittering approach, let’s see if there are still any duplicates\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/hands_on_3_2.html#owin-object",
    "href": "Hands-on_Ex/Hands-on_Ex03/hands_on_3_2.html#owin-object",
    "title": "Hands On Exercise 3.2: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "owin Object",
    "text": "owin Object\nAn owin object is specially designed to represent a certain polygonal region that we are analysing (e.g. Singapore). The code chunk below converts sg SpatialPolygon object into an owin object of spatstat\n\nsg_owin &lt;- as(sg_sp, 'owin')\n\nLet’s see what it looks like by plotting it\n\nplot(sg_owin)\n\n\n\n\n\nCombining point events object and owin object\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1925 points\nAverage intensity 2.570982e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\nNow, we can try to plot it out\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/hands_on_3_2.html#second-order-spatial-point-pattern-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex03/hands_on_3_2.html#second-order-spatial-point-pattern-analysis",
    "title": "Hands On Exercise 3.2: 2nd Order Spatial Point Patterns Analysis Methods",
    "section": "Second-Order Spatial Point Pattern Analysis",
    "text": "Second-Order Spatial Point Pattern Analysis\nBefore going to the analysis, we need to extract the study area\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\nPlot it to check\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\nConvert it into sp format\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\nThen, create the owin object\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\nAnd extract the childcare within the region\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\nRescale it to kilometre\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nPlot the location of the childcare centres\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\nG-Function\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event. We will be learning how to compute G-function estimation using Gest() from the spatstat package, and perform monte carlo simulation using envelope() from spatstat.\n\nChoa Chu Kang Planning Area\nFirst, we use Gest() to compute the G-function\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\nTo confirm the spatial pattern that we observe above, we can do a hypothesis testing\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nalpha-value = 0.001\nNow we perform a monte carlo test\n\nG_CK.csr &lt;- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\n\nTampines Planning Area\nFirst, we use Gest() to compute the G-function\n\nG_tm = Gest(childcare_tm_ppp, correction = \"border\")\nplot(G_tm, xlim=c(0,500))\n\n\n\n\nTo confirm the spatial pattern that we observe above, we can do a hypothesis testing\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nalpha-value = 0.001\nNow we perform a monte carlo test\n\nG_tm.csr &lt;- envelope(childcare_tm_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_tm.csr)\n\n\n\n\n\n\nF-Function\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. We will be learning how to compute F-function estimation using Fest() from the spatstat package, and perform monte carlo simulation using envelope() from spatstat.\n\nChoa Chu Kang Planning Area\nFirst, we use Fest() to compute the F-function\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\nTo confirm the spatial pattern that we observe above, we can do a hypothesis testing\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nalpha-value = 0.001\nNow we perform a monte carlo test\n\nF_CK.csr &lt;- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\nplot(F_CK.csr)\n\n\n\n\n\n\nTampines Planning Area\nFirst, we use Fest() to compute the F-function\n\nF_tm = Fest(childcare_tm_ppp)\nplot(F_tm)\n\n\n\n\nTo confirm the spatial pattern that we observe above, we can do a hypothesis testing\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nalpha-value = 0.001\nNow we perform a monte carlo test\n\nF_tm.csr &lt;- envelope(childcare_tm_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\nplot(F_tm.csr)\n\n\n\n\n\n\n\nK-Function\nK-function measures the number of events found up to a given distance of any particular event. We will be learning how to compute K-function estimation using Kest() from the spatstat package, and perform monte carlo simulation using envelope() from spatstat.\n\nChoa Chu Kang Planning Area\nFirst, we use Kest() to compute the K-function\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\nTo confirm the spatial pattern that we observe above, we can do a hypothesis testing\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nalpha-value = 0.001\nNow we perform a monte carlo test\n\nK_CK.csr &lt;- envelope(childcare_ck_ppp, Kest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\nplot(K_CK.csr)\n\n\n\n\n\n\nTampines Planning Area\nFirst, we use Kest() to compute the K-function\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\nTo confirm the spatial pattern that we observe above, we can do a hypothesis testing\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nalpha-value = 0.001\nNow we perform a monte carlo test\n\nK_tm.csr &lt;- envelope(childcare_tm_ppp, Kest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10 [4:31 remaining] .........20 [4:15 remaining] ...\n......30 [4:10 remaining] .........40 [4:01 remaining] .........50 [3:58 remaining] ..\n.......60 [3:57 remaining] .........70 [3:56 remaining] .........80 [3:52 remaining] .\n........90 [3:49 remaining] .........100 [3:48 remaining] .........110\n [3:45 remaining] .........120 [3:42 remaining] .........130 [3:42 remaining] .........\n140 [3:40 remaining] .........150 [3:37 remaining] .........160 [3:34 remaining] ........\n.170 [3:32 remaining] .........180 [3:29 remaining] .........190 [3:26 remaining] .......\n..200 [3:24 remaining] .........210 [3:21 remaining] .........220 [3:18 remaining] ......\n...230 [3:15 remaining] .........240 [3:12 remaining] .........250 [3:11 remaining] .....\n....260 [3:08 remaining] .........270 [3:05 remaining] .........280 [3:02 remaining] ....\n.....290 [2:59 remaining] .........300 [2:57 remaining] .........310 [2:54 remaining] ...\n......320 [2:52 remaining] .........330 [2:49 remaining] .........340 [2:46 remaining] ..\n.......350 [2:43 remaining] .........360 [2:42 remaining] .........370 [2:39 remaining] .\n........380 [2:37 remaining] .........390 [2:34 remaining] .........400\n [2:32 remaining] .........410 [2:29 remaining] .........420 [2:26 remaining] .........\n430 [2:24 remaining] .........440 [2:21 remaining] .........450 [2:18 remaining] ........\n.460 [2:16 remaining] .........470 [2:13 remaining] .........480 [2:11 remaining] .......\n..490 [2:08 remaining] .........500 [2:06 remaining] .........510 [2:03 remaining] ......\n...520 [2:01 remaining] .........530 [1:58 remaining] .........540 [1:56 remaining] .....\n....550 [1:53 remaining] .........560 [1:51 remaining] .........570 [1:48 remaining] ....\n.....580 [1:46 remaining] .........590 [1:43 remaining] .........600 [1:41 remaining] ...\n......610 [1:38 remaining] .........620 [1:35 remaining] .........630 [1:33 remaining] ..\n.......640 [1:30 remaining] .........650 [1:28 remaining] .........660 [1:25 remaining] .\n........670 [1:23 remaining] .........680 [1:20 remaining] .........690\n [1:18 remaining] .........700 [1:15 remaining] .........710 [1:13 remaining] .........\n720 [1:10 remaining] .........730 [1:08 remaining] .........740 [1:05 remaining] ........\n.750 [1:03 remaining] .........760 [1:00 remaining] .........770 [58 sec remaining] .......\n..780 [55 sec remaining] .........790 [53 sec remaining] .........800 [50 sec remaining] ......\n...810 [48 sec remaining] .........820 [45 sec remaining] .........830 [43 sec remaining] .....\n....840 [40 sec remaining] .........850 [38 sec remaining] .........860 [35 sec remaining] ....\n.....870 [33 sec remaining] .........880 [30 sec remaining] .........890 [28 sec remaining] ...\n......900 [25 sec remaining] .........910 [23 sec remaining] .........920 [20 sec remaining] ..\n.......930 [18 sec remaining] .........940 [15 sec remaining] .........950 [12 sec remaining] .\n........960 [10 sec remaining] .........970 [7 sec remaining] .........980\n [5 sec remaining] .........990 [2 sec remaining] ........\n999.\n\nDone.\n\nplot(K_tm.csr)\n\n\n\n\n\n\n\nL-Function\nWe will be learning how to compute K-function estimation using Lest() from the spatstat package, and perform monte carlo simulation using envelope() from spatstat.\n\nChoa Chu Kang Planning Area\nFirst, we use Lest() to compute the L-function\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\nTo confirm the spatial pattern that we observe above, we can do a hypothesis testing\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nalpha-value = 0.001\nNow we perform a monte carlo test\n\nL_CK.csr &lt;- envelope(childcare_ck_ppp, Lest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\nplot(K_CK.csr)\n\n\n\n\n\n\nTampines Planning Area\nFirst, we use Lest() to compute the K-function\n\nL_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\nTo confirm the spatial pattern that we observe above, we can do a hypothesis testing\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nalpha-value = 0.001\nNow we perform a monte carlo test\n\nL_tm.csr &lt;- envelope(childcare_tm_ppp, Lest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10 [4:28 remaining] .........20 [4:23 remaining] ...\n......30 [4:19 remaining] .........40 [4:09 remaining] .........50 [4:02 remaining] ..\n.......60 [3:57 remaining] .........70 [3:58 remaining] .........80 [3:54 remaining] .\n........90 [3:53 remaining] .........100 [3:50 remaining] .........110\n [3:47 remaining] .........120 [3:44 remaining] .........130 [3:42 remaining] .........\n140 [3:39 remaining] .........150 [3:37 remaining] .........160 [3:34 remaining] ........\n.170 [3:32 remaining] .........180 [3:28 remaining] .........190 [3:27 remaining] .......\n..200 [3:25 remaining] .........210 [3:22 remaining] .........220 [3:20 remaining] ......\n...230 [3:17 remaining] .........240 [3:14 remaining] .........250 [3:12 remaining] .....\n....260 [3:09 remaining] .........270 [3:06 remaining] .........280 [3:03 remaining] ....\n.....290 [3:00 remaining] .........300 [2:58 remaining] .........310 [2:56 remaining] ...\n......320 [2:53 remaining] .........330 [2:50 remaining] .........340 [2:48 remaining] ..\n.......350 [2:45 remaining] .........360 [2:43 remaining] .........370 [2:40 remaining] .\n........380 [2:38 remaining] .........390 [2:35 remaining] .........400\n [2:32 remaining] .........410 [2:29 remaining] .........420 [2:27 remaining] .........\n430 [2:24 remaining] .........440 [2:21 remaining] .........450 [2:19 remaining] ........\n.460 [2:16 remaining] .........470 [2:14 remaining] .........480 [2:11 remaining] .......\n..490 [2:08 remaining] .........500 [2:06 remaining] .........510 [2:04 remaining] ......\n...520 [2:01 remaining] .........530 [1:59 remaining] .........540 [1:56 remaining] .....\n....550 [1:54 remaining] .........560 [1:51 remaining] .........570 [1:48 remaining] ....\n.....580 [1:46 remaining] .........590 [1:44 remaining] .........600 [1:41 remaining] ...\n......610 [1:39 remaining] .........620 [1:36 remaining] .........630 [1:34 remaining] ..\n.......640 [1:31 remaining] .........650 [1:29 remaining] .........660 [1:26 remaining] .\n........670 [1:24 remaining] .........680 [1:21 remaining] .........690\n [1:19 remaining] .........700 [1:16 remaining] .........710 [1:14 remaining] .........\n720 [1:11 remaining] .........730 [1:08 remaining] .........740 [1:06 remaining] ........\n.750 [1:03 remaining] .........760 [1:01 remaining] .........770 [58 sec remaining] .......\n..780 [56 sec remaining] .........790 [53 sec remaining] .........800 [51 sec remaining] ......\n...810 [48 sec remaining] .........820 [46 sec remaining] .........830 [43 sec remaining] .....\n....840 [40 sec remaining] .........850 [38 sec remaining] .........860 [35 sec remaining] ....\n.....870 [33 sec remaining] .........880 [30 sec remaining] .........890 [28 sec remaining] ...\n......900 [25 sec remaining] .........910 [23 sec remaining] .........920 [20 sec remaining] ..\n.......930 [18 sec remaining] .........940 [15 sec remaining] .........950 [12 sec remaining] .\n........960 [10 sec remaining] .........970 [7 sec remaining] .........980\n [5 sec remaining] .........990 [2 sec remaining] ........\n999.\n\nDone.\n\nplot(L_tm.csr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands On Exercise 4: Spatial Weights and Applications",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to compute spatial weights using R. By the end to this hands-on exercise, we will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#data-preparation",
    "title": "Hands On Exercise 4: Spatial Weights and Applications",
    "section": "Data Preparation",
    "text": "Data Preparation\nLet’s combine the geospatial data with the aspatial data\nLet’s take a look at the combined hunan data\n\n\n    NAME_2               ID_3          NAME_3           ENGTYPE_3        \n Length:88          Min.   :21098   Length:88          Length:88         \n Class :character   1st Qu.:21125   Class :character   Class :character  \n Mode  :character   Median :21150   Mode  :character   Mode  :character  \n                    Mean   :21150                                        \n                    3rd Qu.:21174                                        \n                    Max.   :21201                                        \n   Shape_Leng       Shape_Area         County              City          \n Min.   :0.7722   Min.   :0.02128   Length:88          Length:88         \n 1st Qu.:2.2533   1st Qu.:0.13669   Class :character   Class :character  \n Median :2.5844   Median :0.18564   Mode  :character   Mode  :character  \n Mean   :2.6057   Mean   :0.19274                                        \n 3rd Qu.:3.0994   3rd Qu.:0.23735                                        \n Max.   :4.5835   Max.   :0.53452                                        \n   avg_wage            deposite            FAI           Gov_Rev      \n Length:88          Min.   :  564.1   Min.   : 1005   Min.   : 108.4  \n Class :character   1st Qu.: 4306.9   1st Qu.: 3911   1st Qu.: 307.3  \n Mode  :character   Median : 6677.3   Median : 6854   Median : 455.2  \n                    Mean   : 7514.1   Mean   : 9021   Mean   : 646.7  \n                    3rd Qu.: 9502.6   3rd Qu.:10212   3rd Qu.: 637.3  \n                    Max.   :24332.0   Max.   :49234   Max.   :5350.0  \n    Gov_Exp            GDP            GDPPC            GIO        \n Min.   : 683.6   Min.   : 1490   Min.   : 8497   Min.   :   514  \n 1st Qu.:1451.7   1st Qu.: 5844   1st Qu.:14566   1st Qu.:  4965  \n Median :2037.0   Median :10483   Median :20433   Median : 10698  \n Mean   :2155.9   Mean   :14931   Mean   :24405   Mean   : 19227  \n 3rd Qu.:2638.1   3rd Qu.:19131   3rd Qu.:27224   3rd Qu.: 22223  \n Max.   :7885.5   Max.   :88009   Max.   :88656   Max.   :148976  \n      Loan           NIPCR            Bed            Emp        \n Min.   :  358   Min.   : 2895   Min.   : 392   Min.   : 73.65  \n 1st Qu.: 2242   1st Qu.: 3981   1st Qu.:1111   1st Qu.:231.56  \n Median : 3683   Median : 6119   Median :1642   Median :363.79  \n Mean   : 4687   Mean   : 7095   Mean   :1765   Mean   :388.71  \n 3rd Qu.: 5082   3rd Qu.: 9768   3rd Qu.:2240   3rd Qu.:525.04  \n Max.   :40534   Max.   :17070   Max.   :6225   Max.   :919.62  \n      EmpR           EmpRT          Pri_Stu          Sec_Stu      \n Min.   : 62.0   Min.   : 33.6   Min.   :  5.91   Min.   : 3.201  \n 1st Qu.:191.2   1st Qu.:105.5   1st Qu.: 24.09   1st Qu.:15.095  \n Median :284.2   Median :171.2   Median : 36.85   Median :24.834  \n Mean   :316.4   Mean   :190.4   Mean   : 43.08   Mean   :27.609  \n 3rd Qu.:433.5   3rd Qu.:263.5   3rd Qu.: 58.26   3rd Qu.:36.248  \n Max.   :757.6   Max.   :451.6   Max.   :112.20   Max.   :68.853  \n   Household       Household_R          NOIP           Pop_R      \n Min.   : 27.15   Min.   : 30.40   Min.   : 10.0   Min.   : 57.7  \n 1st Qu.: 99.15   1st Qu.: 87.95   1st Qu.: 47.0   1st Qu.:227.3  \n Median :162.85   Median :152.85   Median : 80.5   Median :348.7  \n Mean   :175.04   Mean   :159.62   Mean   :107.3   Mean   :369.3  \n 3rd Qu.:245.32   3rd Qu.:218.22   3rd Qu.:124.0   3rd Qu.:517.0  \n Max.   :391.70   Max.   :369.80   Max.   :733.0   Max.   :834.1  \n      RSCG             Pop_T             Agri            Service       \n Min.   :  354.5   Min.   :  92.3   Min.   :  527.2   Min.   :    5.2  \n 1st Qu.: 1757.2   1st Qu.: 333.1   1st Qu.: 2255.3   1st Qu.: 1576.1  \n Median : 3437.8   Median : 572.5   Median : 3700.7   Median : 5932.5  \n Mean   : 4164.7   Mean   : 586.8   Mean   : 4705.9   Mean   : 8678.9  \n 3rd Qu.: 5630.2   3rd Qu.: 792.0   3rd Qu.: 6312.9   3rd Qu.:11727.5  \n Max.   :22604.0   Max.   :1285.5   Max.   :18328.5   Max.   :53160.0  \n    Disp_Inc           RORP            ROREmp                geometry \n Min.   : 11954   Min.   :0.2357   Min.   :0.4545   POLYGON      :88  \n 1st Qu.: 14966   1st Qu.:0.5968   1st Qu.:0.7565   epsg:3414    : 0  \n Median : 18542   Median :0.6517   Median :0.8300   +proj=tmer...: 0  \n Mean   : 26133   Mean   :0.6298   Mean   :0.8037                     \n 3rd Qu.: 21774   3rd Qu.:0.6850   3rd Qu.:0.8653                     \n Max.   :183252   Max.   :0.7606   Max.   :0.9179                     \n\n\nNow we can make a basemap:\n\n\n\n\n\nTo see the GDPPC distribution on a map:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#queen-based",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#queen-based",
    "title": "Hands On Exercise 4: Spatial Weights and Applications",
    "section": "QUEEN Based",
    "text": "QUEEN Based\nthe term QUEEN refers to a queen in chess, which can move to any points that are in contact, be it horizontal, vertical, or even diagonal. This means that in our computation, any region that is in contact is considered a neighbor, even if there is only a single point of contact between those regions.\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary shows that out of 88 area units in Hunan, with the most connected unit having 11 neighbours.\nTo access the name of the county of the first polygon:\n\n\n[1] \"Anxiang\"\n\n\nLet’s see the neighbors of the first polygon in the object\n\n\n[1]  2  3  4 57 85\n\n\nThe code chunk above returns the index of the neighbours of the first polygon in the object. To get the name of the regions, use the code chunk below\n\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nThe code chunk below is used to retrieve the GDPPC of the neighbours of the first polygon\n\n\n[1] 20981 34592 24473 21311 22879\n\n\nUse str() to display the complete weight matrix\n\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#rook-based",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#rook-based",
    "title": "Hands On Exercise 4: Spatial Weights and Applications",
    "section": "ROOK Based",
    "text": "ROOK Based\nUnlike the queen, a rook can only move vertically or horizontally, with no diagonal movement. In this case, using a ROOK based (queen=FALSE) means that regions that only have a single point of contact is not considered a neighbor.\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nHere you can see that unlike the queen version, the rook method shows 85 regions with 10 links\nChecking the names of the neighbours of the first polygon\n\n\n[1] \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\""
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-contiguity-weights",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-contiguity-weights",
    "title": "Hands On Exercise 4: Spatial Weights and Applications",
    "section": "Visualising Contiguity Weights",
    "text": "Visualising Contiguity Weights\nA connectivity graph needs a point and displays a line to each neighboring point. As we are working with polygons in this exercise, we need to get points to draw the line. The most typical method is polygon centroids.\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package.\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\nNow we combine it with cbind\nCheck the first few observations\n\n\n     longitude latitude\n[1,]  836662.0  3175038\n[2,]  829886.4  3109750\n[3,]  810959.7  3176299\n[4,]  790539.4  3205555\n[5,]  783717.8  3176834\n\n\n\nPlotting Queen contiguity based neighbours map\n\n\n\n\n\n\n\nPlotting Rook contiguity based neighbours map"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#identifying-cut-off-distance",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#identifying-cut-off-distance",
    "title": "Hands On Exercise 4: Spatial Weights and Applications",
    "section": "Identifying cut-off distance",
    "text": "Identifying cut-off distance\nSteps: 1. Return a matrix with indices of points that are k nearest neighbours using knearneigh() 2. Convert the knn object from knearneigh() to a list of class nb with a lost of integer vectors containing neighbour region id using knn2nb() 3. Return length of neigbour relationship edges using nbdists() 4. Remove the list structure of returned object using unlist()\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2251    6033    9870    9904   13825   17201"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-fixed-distance-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-fixed-distance-weight-matrix",
    "title": "Hands On Exercise 4: Spatial Weights and Applications",
    "section": "Computing Fixed Distance Weight Matrix",
    "text": "Computing Fixed Distance Weight Matrix\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 0 \nPercentage nonzero weights: 0 \nAverage number of links: 0 \n88 regions with no links:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\n28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51\n52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75\n76 77 78 79 80 81 82 83 84 85 86 87 88\n88 disjoint connected subgraphs\n\n\n\n\nList of 88\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n $ : int 0\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\nPlotting Fixed Distance Weight Matrix\n\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-adaptive-distance-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-adaptive-distance-weight-matrix",
    "title": "Hands On Exercise 4: Spatial Weights and Applications",
    "section": "Computing Adaptive Distance Weight Matrix",
    "text": "Computing Adaptive Distance Weight Matrix\nAdaptive distance weight matrix takes into account that less densely settled areas (e.g. villages, countryside, etc) tend to have less neighbours, and more densely settled areas (big cities) tends to have more neighbours. Thus, we can use K-Nearest Neighbour to control the number of neighbours directly when we calculate the weight matrix\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 57 69\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 78 84\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 39 81\n $ : int [1:6] 25 27 30 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 34 36 39 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 74 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 50 51 52 53 54 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 65 76\n $ : int [1:6] 57 58 64 66 67 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 3 4 5 6 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 16 17 22 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 46 71 73 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 57 58 64 65 66 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 23 38 40 41 43 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 67 68 74\n $ : int [1:6] 1 2 3 5 56 69\n $ : int [1:6] 8 21 46 47 71 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\nPlotting Adaptive Distance Weight Matrix"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#row-standardised-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#row-standardised-weight-matrix",
    "title": "Hands On Exercise 4: Spatial Weights and Applications",
    "section": "Row-Standardised Weight Matrix",
    "text": "Row-Standardised Weight Matrix\nNow, we assign weights to each neighboring polygon. The style=“W” argument refers to each neighboring polygon being assigned equal weight. This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. This way is the most intuitive way, but a huge drawback is that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. Other more robust options are availabe, such as using style=“B”.\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nzero.policy = TRUE allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset\nTo see the weights of the first polygon’s eight neighbors type:\n\n\n[[1]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n\nwhen R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nCompare it with the style=“B” below\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn         S0           S1           S2\nB 88 7744 0.06196579 2.782761e-05 0.0002075265\n\n\n[[1]]\n[1] 7.791839e-05 1.721638e-04 1.009428e-04 1.616320e-04 9.865571e-05\n\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n5.083e-05 7.015e-05 9.887e-05 1.383e-04 1.582e-04 7.579e-04"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#spatial-lag-with-row-standardized-weights",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#spatial-lag-with-row-standardized-weights",
    "title": "Hands On Exercise 4: Spatial Weights and Applications",
    "section": "Spatial Lag With Row-Standardized Weights",
    "text": "Spatial Lag With Row-Standardized Weights\nSpatially lagged values here refers to average neighbor GDPPC value for each polygon.\n\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nNowe we retrieve the GDPPC of these five countries\n\n\n[1] 20981 34592 24473 21311 22879\n\n\nNow we append the lag list to hunan data\nNow let’s plot it to compare GDPPC and spatial lag GDPPC\n\n\n\n\n\nThe spatial lag GDPPC is the weighted average of the neighboring region’s GDPPC. Essentially, When interpreting spatial lag with row-standardized weights, you are looking at how much the GDPPC of neighboring regions contributes to the GDPPC of a given region"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#spatial-lag-as-sum-of-neighboring-values",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#spatial-lag-as-sum-of-neighboring-values",
    "title": "Hands On Exercise 4: Spatial Weights and Applications",
    "section": "Spatial Lag As Sum of Neighboring Values",
    "text": "Spatial Lag As Sum of Neighboring Values\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights.\nFirst, we apply a value of 1 per each neighbor with lapply.\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nAfter assigning the proper weights, e can use lag.listw to compute a lag variable from our weight and GDPPC\nWe can append the output to our hunan data.\nLet’s compare the GDPPC with the lag sum"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#spatial-window-average",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#spatial-window-average",
    "title": "Hands On Exercise 4: Spatial Weights and Applications",
    "section": "Spatial Window Average",
    "text": "Spatial Window Average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To add the diagonal element, we can use include.self() from spdep\n\n\n[1]  1  2  3  4 57 85\n\n\nNow we obtain weights with nb2listw()\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nNext, we just need to create the lag variable\n\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nAnd convert it into a data.frame and combine it with the hunan data\nCompare the lag GDPPC with the lag_window_average GDPPC with the kable() function from knitr\n\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((825339.4 3209148,…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((846673.4 3139165,…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((810038.7 3190827,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((756935.9 3225838,…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((783475.6 3207079,…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((708206.5 3241744,…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((1024633 3091569, …\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((900741.8 3060845,…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((906766.3 3077439,…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((959144.5 2890585,…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((1065564 2828411, …\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((893838.3 2764449,…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((910317.1 2744004,…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((1017476 2788033, …\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((977190.9 2763499,…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((976718.2 2845964,…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((1020609 2820527, …\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((904677 2861393, 9…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((948954.5 2932803,…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((916277.6 2904767,…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((897149.3 2958067,…\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((942592.9 2874262,…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((818150.6 2904520,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((659836.5 3027008,…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((631117.1 2970989,…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((634422.1 2901669,…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((623976.4 2862538,…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((615109.7 2998224,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((636593.9 2830511,…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((561722.2 2935313,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((704263.2 3039179,…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((723892.4 3117846,…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((625721.6 2957129,…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((787713 2989441, 7…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((861128.6 2981916,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((765661.4 3030736,…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((686942.1 2858390,…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((786516 2883527, 7…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((704480.6 2935185,…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((734695.4 2968915,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((827858.7 2945904,…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((678946.5 2903356,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((738995.8 2899208,…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((748750.9 2878860,…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((796346.4 2964043,…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((886350.3 3014311,…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((877379.7 3022683,…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((601273.4 3092068,…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((587249 3020500, 5…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((620888.1 3083237,…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((589011.7 3067928,…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((616595 3052847, 6…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((590246.8 3180293,…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((643343 3048504, 6…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((627795.4 3145425,…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((789009.7 3081509,…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((853111.1 3178170,…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((866754 3147605, 8…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((816357.7 2709600,…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((873168.1 2748284,…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((853845.3 2801658,…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((835079.5 2802787,…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((872752.4 2800712,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((909742.6 3208358,…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((970905.9 3211447,…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((922076.2 3134116,…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((1005450 3145461, …\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((915261.6 3129236,…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((711106.1 3194274,…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((1015909 2926248, …\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((988558.1 3018277,…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((1036591 2872725, …\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((995331 2959198, 9…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((956308.2 3024789,…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((681259.9 3160705,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((951297.3 3202661,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((797197.9 2878034,…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((832713.3 3088425,…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((788361.9 2932157,…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((800853.9 3014299,…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((652450.5 2943812,…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((911692.2 2904962,…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((955964.6 2803036,…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((925766.9 3023920,…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((828601.9 3161592,…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((936937.8 3008710,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((797995.7 2766682,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((787361.7 2718895,…\n\n\n\n\n\nAnd plot it to compare"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#spatial-window-sum",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#spatial-window-sum",
    "title": "Hands On Exercise 4: Spatial Weights and Applications",
    "section": "Spatial Window Sum",
    "text": "Spatial Window Sum\nThe spatial window sum is similar to the window average, but we are not using the row-standardized weights.\n\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNow we can compare it with both kable() and qtm()\n\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n124236\nPOLYGON ((825339.4 3209148,…\n\n\nHanshou\n113624\n113624\nPOLYGON ((846673.4 3139165,…\n\n\nJinshi\n96573\n96573\nPOLYGON ((810038.7 3190827,…\n\n\nLi\n110950\n110950\nPOLYGON ((756935.9 3225838,…\n\n\nLinli\n109081\n109081\nPOLYGON ((783475.6 3207079,…\n\n\nShimen\n106244\n106244\nPOLYGON ((708206.5 3241744,…\n\n\nLiuyang\n174988\n174988\nPOLYGON ((1024633 3091569, …\n\n\nNingxiang\n235079\n235079\nPOLYGON ((900741.8 3060845,…\n\n\nWangcheng\n273907\n273907\nPOLYGON ((906766.3 3077439,…\n\n\nAnren\n256221\n256221\nPOLYGON ((959144.5 2890585,…\n\n\nGuidong\n98013\n98013\nPOLYGON ((1065564 2828411, …\n\n\nJiahe\n104050\n104050\nPOLYGON ((893838.3 2764449,…\n\n\nLinwu\n102846\n102846\nPOLYGON ((910317.1 2744004,…\n\n\nRucheng\n92017\n92017\nPOLYGON ((1017476 2788033, …\n\n\nYizhang\n133831\n133831\nPOLYGON ((977190.9 2763499,…\n\n\nYongxing\n158446\n158446\nPOLYGON ((976718.2 2845964,…\n\n\nZixing\n141883\n141883\nPOLYGON ((1020609 2820527, …\n\n\nChangning\n119508\n119508\nPOLYGON ((904677 2861393, 9…\n\n\nHengdong\n150757\n150757\nPOLYGON ((948954.5 2932803,…\n\n\nHengnan\n153324\n153324\nPOLYGON ((916277.6 2904767,…\n\n\nHengshan\n113593\n113593\nPOLYGON ((897149.3 2958067,…\n\n\nLeiyang\n129594\n129594\nPOLYGON ((942592.9 2874262,…\n\n\nQidong\n142149\n142149\nPOLYGON ((818150.6 2904520,…\n\n\nChenxi\n100119\n100119\nPOLYGON ((659836.5 3027008,…\n\n\nZhongfang\n82884\n82884\nPOLYGON ((631117.1 2970989,…\n\n\nHuitong\n74668\n74668\nPOLYGON ((634422.1 2901669,…\n\n\nJingzhou\n43184\n43184\nPOLYGON ((623976.4 2862538,…\n\n\nMayang\n99244\n99244\nPOLYGON ((615109.7 2998224,…\n\n\nTongdao\n46549\n46549\nPOLYGON ((636593.9 2830511,…\n\n\nXinhuang\n20518\n20518\nPOLYGON ((561722.2 2935313,…\n\n\nXupu\n140576\n140576\nPOLYGON ((704263.2 3039179,…\n\n\nYuanling\n121601\n121601\nPOLYGON ((723892.4 3117846,…\n\n\nZhijiang\n92069\n92069\nPOLYGON ((625721.6 2957129,…\n\n\nLengshuijiang\n43258\n43258\nPOLYGON ((787713 2989441, 7…\n\n\nShuangfeng\n144567\n144567\nPOLYGON ((861128.6 2981916,…\n\n\nXinhua\n132119\n132119\nPOLYGON ((765661.4 3030736,…\n\n\nChengbu\n51694\n51694\nPOLYGON ((686942.1 2858390,…\n\n\nDongan\n59024\n59024\nPOLYGON ((786516 2883527, 7…\n\n\nDongkou\n69349\n69349\nPOLYGON ((704480.6 2935185,…\n\n\nLonghui\n73780\n73780\nPOLYGON ((734695.4 2968915,…\n\n\nShaodong\n94651\n94651\nPOLYGON ((827858.7 2945904,…\n\n\nSuining\n100680\n100680\nPOLYGON ((678946.5 2903356,…\n\n\nWugang\n69398\n69398\nPOLYGON ((738995.8 2899208,…\n\n\nXinning\n52798\n52798\nPOLYGON ((748750.9 2878860,…\n\n\nXinshao\n140472\n140472\nPOLYGON ((796346.4 2964043,…\n\n\nShaoshan\n118623\n118623\nPOLYGON ((886350.3 3014311,…\n\n\nXiangxiang\n180933\n180933\nPOLYGON ((877379.7 3022683,…\n\n\nBaojing\n82798\n82798\nPOLYGON ((601273.4 3092068,…\n\n\nFenghuang\n83090\n83090\nPOLYGON ((587249 3020500, 5…\n\n\nGuzhang\n97356\n97356\nPOLYGON ((620888.1 3083237,…\n\n\nHuayuan\n59482\n59482\nPOLYGON ((589011.7 3067928,…\n\n\nJishou\n77334\n77334\nPOLYGON ((616595 3052847, 6…\n\n\nLongshan\n38777\n38777\nPOLYGON ((590246.8 3180293,…\n\n\nLuxi\n111463\n111463\nPOLYGON ((643343 3048504, 6…\n\n\nYongshun\n74715\n74715\nPOLYGON ((627795.4 3145425,…\n\n\nAnhua\n174391\n174391\nPOLYGON ((789009.7 3081509,…\n\n\nNan\n150558\n150558\nPOLYGON ((853111.1 3178170,…\n\n\nYuanjiang\n122144\n122144\nPOLYGON ((866754 3147605, 8…\n\n\nJianghua\n68012\n68012\nPOLYGON ((816357.7 2709600,…\n\n\nLanshan\n84575\n84575\nPOLYGON ((873168.1 2748284,…\n\n\nNingyuan\n143045\n143045\nPOLYGON ((853845.3 2801658,…\n\n\nShuangpai\n51394\n51394\nPOLYGON ((835079.5 2802787,…\n\n\nXintian\n98279\n98279\nPOLYGON ((872752.4 2800712,…\n\n\nHuarong\n47671\n47671\nPOLYGON ((909742.6 3208358,…\n\n\nLinxiang\n26360\n26360\nPOLYGON ((970905.9 3211447,…\n\n\nMiluo\n236917\n236917\nPOLYGON ((922076.2 3134116,…\n\n\nPingjiang\n220631\n220631\nPOLYGON ((1005450 3145461, …\n\n\nXiangyin\n185290\n185290\nPOLYGON ((915261.6 3129236,…\n\n\nCili\n64640\n64640\nPOLYGON ((711106.1 3194274,…\n\n\nChaling\n70046\n70046\nPOLYGON ((1015909 2926248, …\n\n\nLiling\n126971\n126971\nPOLYGON ((988558.1 3018277,…\n\n\nYanling\n144693\n144693\nPOLYGON ((1036591 2872725, …\n\n\nYou\n129404\n129404\nPOLYGON ((995331 2959198, 9…\n\n\nZhuzhou\n284074\n284074\nPOLYGON ((956308.2 3024789,…\n\n\nSangzhi\n112268\n112268\nPOLYGON ((681259.9 3160705,…\n\n\nYueyang\n203611\n203611\nPOLYGON ((951297.3 3202661,…\n\n\nQiyang\n145238\n145238\nPOLYGON ((797197.9 2878034,…\n\n\nTaojiang\n251536\n251536\nPOLYGON ((832713.3 3088425,…\n\n\nShaoyang\n108078\n108078\nPOLYGON ((788361.9 2932157,…\n\n\nLianyuan\n238300\n238300\nPOLYGON ((800853.9 3014299,…\n\n\nHongjiang\n108870\n108870\nPOLYGON ((652450.5 2943812,…\n\n\nHengyang\n108085\n108085\nPOLYGON ((911692.2 2904962,…\n\n\nGuiyang\n262835\n262835\nPOLYGON ((955964.6 2803036,…\n\n\nChangsha\n248182\n248182\nPOLYGON ((925766.9 3023920,…\n\n\nTaoyuan\n244850\n244850\nPOLYGON ((828601.9 3161592,…\n\n\nXiangtan\n404456\n404456\nPOLYGON ((936937.8 3008710,…\n\n\nDao\n67608\n67608\nPOLYGON ((797995.7 2766682,…\n\n\nJiangyong\n33860\n33860\nPOLYGON ((787361.7 2718895,…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "we will learn how to compute Global and Local Measures of Spatial Autocorrelation (GMSA) by using spdep package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#packages",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Packages",
    "text": "Packages\nUse this chunk to load the required packages\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Data",
    "text": "Data\nWe are using these data: - Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format. - Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\nLoading Data\nWe will use st_read() for the geospatial data, and read_csv() for the aspatial data\n\nhunan &lt;- st_read(dsn=\"data/geospatial\", layer='Hunan')\n\nReading layer `Hunan' from data source \n  `C:\\Users\\yozaf\\SMUY3S2\\Geospatial\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nhunan2012 &lt;- read_csv('data/aspatial/Hunan_2012.csv')\n\n\n\nJoining data\nWe will use left_join() to combine the two data\n\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\n\n\nVisualization\nWe will use qtm() to prepare a basemap and a cloropeth map showing distribution of GDPPC 2012\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-contiguity-spatial-weights",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-contiguity-spatial-weights",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\nWe need to construct a spatial weights of the study area first. We can use poly2nb() to do that. The code chunk below computes Queen contiguity weight matrix\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#row-standardised-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#row-standardised-weight-matrix",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Row-standardised Weight Matrix",
    "text": "Row-standardised Weight Matrix\nNext, we can assign wights to the neighbouring polygon. This study will use equal weight (style=‘W’)\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#morans-test",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#morans-test",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Moran’s Test",
    "text": "Moran’s Test\nWe will learn how to use moran.test() from spdep\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\nMonte Carlo Moran’s\nmoran.mc() can perform monte carlo simulation of the Moran’s test\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nVisualization\nTo understand more about the test result, we can first get some statistical measures with summary()\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\nThen, we can also plot a histogram with hist()\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#gearys-c",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#gearys-c",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Geary’s C",
    "text": "Geary’s C\nWe are also learning geary.test() from spdep\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\nMonte Carlo Geary’s Test\ngeary.mc() can perform monte carlo simulation of the Moran’s test\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nVisualization\nTo understand more about the test result, we can first get some statistical measures with summary()\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\nThen, we can also plot a histogram with hist()\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Geary C\")\nabline(v=0, \n       col=\"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#spatial-correlogram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#spatial-correlogram",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Spatial Correlogram",
    "text": "Spatial Correlogram\nSpatial correlogram is used to examine patterns, showing how correlated are paris of spatial observations when we increase the distance\n\nMoran’s I correlogram\nWe can use sp.correlogram with method=“I”\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\n\nGeary’s C correlogram\nWe can use sp.correlogram with method=“I”\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#local-morans-i",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#local-morans-i",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Local Moran’s I",
    "text": "Local Moran’s I\n\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\n\nMapping local Moran’s I values\nBefore mapping, it is wse to append the local Moran’s I dataframe to hunan SpatialolygonDataFrame\n\nhunan.localMI &lt;- cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\nNow we can plot the local values\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMapping local Moran’s p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMapping both local Moran’s I values and p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\n\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#moran-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#moran-scatterplot",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Moran Scatterplot",
    "text": "Moran Scatterplot\nWe can use moran.plot()\n\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#moran-scatterplot-with-standardised-variable",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#moran-scatterplot-with-standardised-variable",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Moran scatterplot with standardised variable",
    "text": "Moran scatterplot with standardised variable\nFirst we can use scale() to scale the variables\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nNow we can plot it with this method\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#preparing-lisa-map-classes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#preparing-lisa-map-classes",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Preparing LISA map classes",
    "text": "Preparing LISA map classes\nFirst, we set a quadrant object.Next, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I &lt;- localMI[,1]   \nsignif &lt;- 0.05       \nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[localMI[,5]&gt;signif] &lt;- 0"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#lisa-map",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#lisa-map",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "LISA map",
    "text": "LISA map\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getis-and-ords-g-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#getis-and-ords-g-statistics",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Getis and Ord’s G-Statistics",
    "text": "Getis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#distance-based-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#distance-based-weight-matrix",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Distance-Based Weight Matrix",
    "text": "Distance-Based Weight Matrix\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords &lt;- cbind(longitude, latitude)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#determining-cut-off-distance",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#determining-cut-off-distance",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Determining Cut Off Distance",
    "text": "Determining Cut Off Distance\nStep-by-step: 1. Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep. 2. Convert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb(). 3. Return the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise. 4. Remove the list structure of the returned object by using unlist().\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-fixed-distance-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-fixed-distance-weight-matrix",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Computing Fixed Distance Weight Matrix",
    "text": "Computing Fixed Distance Weight Matrix\nWe can use dnearneigh() to get the weight matrix\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nAnd convert it into spatial weights object with nb2listw()\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-adaptive-distance-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-adaptive-distance-weight-matrix",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Computing Adaptive Distance Weight Matrix",
    "text": "Computing Adaptive Distance Weight Matrix\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nAnd convert it into spatial weights object with nb2listw()\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#fixed-distance",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#fixed-distance",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Fixed Distance",
    "text": "Fixed Distance\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\n\nCombine it to hunan sf data frame\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\nMapping Gi Values\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#adaptive-distance",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#adaptive-distance",
    "title": "Hands On Exercise 5: Global and Local Measures of Spatial Autocorrelation",
    "section": "Adaptive Distance",
    "text": "Adaptive Distance\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\nCombine it to hunan sf data frame\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\nMapping Gi Values\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class Exercise 02",
    "section": "",
    "text": "In this in-class exercise, we will be using these packages:\n\nsf\ntmap\ntidyverse\narrow\nlubridate\n\n\npacman::p_load(sf, tmap, tidyverse, arrow, lubridate)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#loading-packages",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#loading-packages",
    "title": "In-class Exercise 02",
    "section": "",
    "text": "In this in-class exercise, we will be using these packages:\n\nsf\ntmap\ntidyverse\narrow\nlubridate\n\n\npacman::p_load(sf, tmap, tidyverse, arrow, lubridate)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#loading-data",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#loading-data",
    "title": "In-class Exercise 02",
    "section": "Loading Data",
    "text": "Loading Data\nUsing the read_parquet() function from the arrow package to load the .parquet data into a file called df\n\ndf &lt;- read_parquet('data/GrabPosisi/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet')\n\nWe noticed that pingtimestamp is an integer field, so we need to convert pingtimestamp field to a datetime format (POCIXCT)\n\ndf$pingtimestamp &lt;- as_datetime(df$pingtimestamp)\n\nNow, we save the df into a .rds file\n\nwrite_rds(df, 'data/rds/part0.rds')"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#extracting-trip-starting-locations",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#extracting-trip-starting-locations",
    "title": "In-class Exercise 02",
    "section": "Extracting trip starting locations",
    "text": "Extracting trip starting locations\n\nExtract trip origin locations\nDerive 3 new columns for weekday, starting hour, and day of the month\nName the output tibble data.frame origin_df\n\n\norigin_df &lt;- df |&gt; \n  group_by(trj_id) |&gt; \n  arrange(pingtimestamp) |&gt;\n  filter(row_number()==1) |&gt;\n  mutate(weekday = wday(pingtimestamp, \n                        label = TRUE, \n                        abbr=TRUE), \n         starting_hour = factor(hour(pingtimestamp)), \n         day = factor(mday(pingtimestamp)))\n\nNow we extract the trip’s destination locations\n\n#Same approach, but in descending order\ndestination_df &lt;- df |&gt; \n  group_by(trj_id) |&gt; \n  arrange(desc(pingtimestamp)) |&gt;\n  filter(row_number()==1) |&gt;\n  mutate(weekday = wday(pingtimestamp, \n                        label = TRUE, \n                        abbr=TRUE), \n         ending_hour = factor(hour(pingtimestamp)), \n         day = factor(mday(pingtimestamp)))\n\nSave the data to .rds"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#import-data-from-rds-if-needed",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html#import-data-from-rds-if-needed",
    "title": "In-class Exercise 02",
    "section": "Import data from RDS if needed",
    "text": "Import data from RDS if needed\n\norigin_df &lt;- read_rds('data/rds/origin_df.rds')\ndestination_df &lt;- read_rds('data/rds/destination_df.rds')"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03-Network.html#loading-data",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03-Network.html#loading-data",
    "title": "In-class Exercise 03 - Network Constrained Spatial Point Analysis",
    "section": "Loading Data",
    "text": "Loading Data\n\n\nReading layer `Punggol_St' from data source \n  `C:\\Users\\yozaf\\SMUY3S2\\Geospatial\\IS415-GAA\\In-class_Ex\\In-class_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\n\n\nReading layer `Punggol_CC' from data source \n  `C:\\Users\\yozaf\\SMUY3S2\\Geospatial\\IS415-GAA\\In-class_Ex\\In-class_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n\n\n\n\n\n\n\n\n\n\nLixelize\nLength of lixel = 750 Minimum length of lixel = 375 mindist should be half of length"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03-Network.html#generating-line-centre-points",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03-Network.html#generating-line-centre-points",
    "title": "In-class Exercise 03 - Network Constrained Spatial Point Analysis",
    "section": "Generating line centre points",
    "text": "Generating line centre points\nWe can use lines_center() of spNetwork"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03-Network.html#performing-nkde",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03-Network.html#performing-nkde",
    "title": "In-class Exercise 03 - Network Constrained Spatial Point Analysis",
    "section": "Performing NKDE",
    "text": "Performing NKDE\nBe careful of kernel methods and bandwidth. They are the most important.\n\nVisualizing NKDE\nInsert the densities to samples and lixels (with additional rescaling)\nThen, plot it"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#loading-packages",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#loading-packages",
    "title": "In-class Exercise 03",
    "section": "Loading packages",
    "text": "Loading packages"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#loading-data",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#loading-data",
    "title": "In-class Exercise 03",
    "section": "Loading Data",
    "text": "Loading Data\n\n\nReading layer `ChildCareServices' from data source \n  `C:\\Users\\yozaf\\SMUY3S2\\Geospatial\\IS415-GAA\\In-class_Ex\\In-class_Ex03\\data\\geospatial\\ChildCareServices.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\yozaf\\SMUY3S2\\Geospatial\\IS415-GAA\\In-class_Ex\\In-class_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#creating-coastal-outline",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#creating-coastal-outline",
    "title": "In-class Exercise 03",
    "section": "Creating Coastal outline",
    "text": "Creating Coastal outline"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#geospatial-data-wrangling",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#geospatial-data-wrangling",
    "title": "In-class Exercise 03",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\n\nConverting to SP from SF\n\n\nConverting to PPP from SF\nWith as.ppp, we can convert to PPP without manually converting to SP first\n\n\nMarked planar point pattern:  1925 points\nAverage intensity 2.417323e-06 points per square unit\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1925 character character \n\nWindow: rectangle = [11810.03, 45404.24] x [25596.33, 49300.88] units\n                    (33590 x 23700 units)\nWindow area = 796335000 square units\n\n\n\n\nHandling Duplicates\nCheck for duplication with any(duplicated())\n\n\n[1] FALSE\n\n\nTo count the number of co-incidence point, we use multiplicity()\n\n\n   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [778] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [815] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [852] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [889] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [926] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [963] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1037] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1074] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1148] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1296] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1518] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1555] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1592] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1629] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1666] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1703] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1740] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1777] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1814] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1851] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1888] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1925] 1\n\n\n\n\nCreating owin\nowin confines the data points to a certain area\nbefore using owin, the map is not confined. With owin, we can focus on the land of Singapore\n\n\nWindow: polygonal boundary\n80 separate polygons (35 holes)\n                  vertices         area relative.area\npolygon 1            14650  6.97996e+08      8.93e-01\npolygon 2 (hole)         3 -2.21090e+00     -2.83e-09\npolygon 3              285  1.61128e+06      2.06e-03\npolygon 4 (hole)         3 -2.05920e-03     -2.63e-12\npolygon 5 (hole)         3 -8.83647e-03     -1.13e-11\npolygon 6              668  5.40368e+07      6.91e-02\npolygon 7               44  2.26577e+03      2.90e-06\npolygon 8               27  1.50315e+04      1.92e-05\npolygon 9              711  1.28815e+07      1.65e-02\npolygon 10 (hole)       36 -4.01660e+04     -5.14e-05\npolygon 11 (hole)      317 -5.11280e+04     -6.54e-05\npolygon 12 (hole)        3 -3.41405e-01     -4.37e-10\npolygon 13 (hole)        3 -2.89050e-05     -3.70e-14\npolygon 14              77  3.29939e+05      4.22e-04\npolygon 15              30  2.80002e+04      3.58e-05\npolygon 16 (hole)        3 -2.83151e-01     -3.62e-10\npolygon 17              71  8.18750e+03      1.05e-05\npolygon 18 (hole)        3 -1.68316e-04     -2.15e-13\npolygon 19 (hole)       36 -7.79904e+03     -9.97e-06\npolygon 20 (hole)        4 -2.05611e-02     -2.63e-11\npolygon 21 (hole)        3 -2.18000e-06     -2.79e-15\npolygon 22 (hole)        3 -3.65501e-03     -4.67e-12\npolygon 23 (hole)        3 -4.95057e-02     -6.33e-11\npolygon 24 (hole)        3 -3.99521e-02     -5.11e-11\npolygon 25 (hole)        3 -6.62377e-01     -8.47e-10\npolygon 26 (hole)        3 -2.09065e-03     -2.67e-12\npolygon 27              91  1.49663e+04      1.91e-05\npolygon 28 (hole)       26 -1.25665e+03     -1.61e-06\npolygon 29 (hole)      349 -1.21433e+03     -1.55e-06\npolygon 30 (hole)       20 -4.39069e+00     -5.62e-09\npolygon 31 (hole)       48 -1.38338e+02     -1.77e-07\npolygon 32 (hole)       28 -1.99862e+01     -2.56e-08\npolygon 33              40  1.38607e+04      1.77e-05\npolygon 34 (hole)       40 -6.00381e+03     -7.68e-06\npolygon 35 (hole)        7 -1.40545e-01     -1.80e-10\npolygon 36 (hole)       12 -8.36709e+01     -1.07e-07\npolygon 37              45  2.51218e+03      3.21e-06\npolygon 38             142  3.22293e+03      4.12e-06\npolygon 39             148  3.10395e+03      3.97e-06\npolygon 40              75  1.73526e+04      2.22e-05\npolygon 41              83  5.28920e+03      6.76e-06\npolygon 42             211  4.70521e+05      6.02e-04\npolygon 43             106  3.04104e+03      3.89e-06\npolygon 44             266  1.50631e+06      1.93e-03\npolygon 45              71  5.63061e+03      7.20e-06\npolygon 46              10  1.99717e+02      2.55e-07\npolygon 47             478  2.06120e+06      2.64e-03\npolygon 48             155  2.67502e+05      3.42e-04\npolygon 49            1027  1.27782e+06      1.63e-03\npolygon 50 (hole)        3 -1.16959e-03     -1.50e-12\npolygon 51              65  8.42861e+04      1.08e-04\npolygon 52              47  3.82087e+04      4.89e-05\npolygon 53               6  4.50259e+02      5.76e-07\npolygon 54             132  9.53357e+04      1.22e-04\npolygon 55 (hole)        3 -3.23310e-04     -4.13e-13\npolygon 56               4  2.69313e+02      3.44e-07\npolygon 57 (hole)        3 -1.46474e-03     -1.87e-12\npolygon 58            1045  4.44510e+06      5.68e-03\npolygon 59              22  6.74651e+03      8.63e-06\npolygon 60              64  3.43149e+04      4.39e-05\npolygon 61 (hole)        3 -1.98390e-03     -2.54e-12\npolygon 62 (hole)        4 -1.13774e-02     -1.46e-11\npolygon 63              14  5.86546e+03      7.50e-06\npolygon 64              95  5.96187e+04      7.62e-05\npolygon 65 (hole)        4 -1.86410e-02     -2.38e-11\npolygon 66 (hole)        3 -5.12482e-03     -6.55e-12\npolygon 67 (hole)        3 -1.96410e-03     -2.51e-12\npolygon 68 (hole)        3 -5.55856e-03     -7.11e-12\npolygon 69             234  2.08755e+06      2.67e-03\npolygon 70              10  4.90942e+02      6.28e-07\npolygon 71             234  4.72886e+05      6.05e-04\npolygon 72 (hole)       13 -3.91907e+02     -5.01e-07\npolygon 73              15  4.03300e+04      5.16e-05\npolygon 74             227  1.10308e+06      1.41e-03\npolygon 75              10  6.60195e+03      8.44e-06\npolygon 76              19  3.09221e+04      3.95e-05\npolygon 77             145  9.61782e+05      1.23e-03\npolygon 78              30  4.28933e+03      5.49e-06\npolygon 79              37  1.29481e+04      1.66e-05\npolygon 80               4  9.47108e+01      1.21e-07\nenclosing rectangle: [2667.54, 56396.44] x [15748.72, 50256.33] units\n                     (53730 x 34510 units)\nWindow area = 781945000 square units\nFraction of frame area: 0.422\n\n\n\n\n\n\n\n\n\nCombining PPP with OWIN"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#comparing-spatial-points-by-region",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html#comparing-spatial-points-by-region",
    "title": "In-class Exercise 03",
    "section": "Comparing Spatial Points by Region",
    "text": "Comparing Spatial Points by Region\n\nExtracting region data"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#loading-data",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#loading-data",
    "title": "In-Class Exercise 4: Spatial Weights and Applications",
    "section": "Loading Data",
    "text": "Loading Data\n\n\nReading layer `Hunan' from data source \n  `C:\\Users\\yozaf\\SMUY3S2\\Geospatial\\IS415-GAA\\In-class_Ex\\In-class_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nReading layer `Hunan_2012' from data source \n  `C:\\Users\\yozaf\\SMUY3S2\\Geospatial\\IS415-GAA\\In-class_Ex\\In-class_Ex04\\data\\aspatial\\Hunan_2012.csv' \n  using driver `CSV'"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#combining-geospatial-and-aspatial-data",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#combining-geospatial-and-aspatial-data",
    "title": "In-Class Exercise 4: Spatial Weights and Applications",
    "section": "Combining Geospatial and Aspatial Data",
    "text": "Combining Geospatial and Aspatial Data"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#using-gwmodel",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#using-gwmodel",
    "title": "In-Class Exercise 4: Spatial Weights and Applications",
    "section": "Using GWModel",
    "text": "Using GWModel\nSince it is an older library, they don’t accept sf, so we need to convert to sp"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/data/Geospatial/MPSZ-2019/MPSZ-2019.html",
    "href": "Take-home_Ex/Take-home_Ex01/data/Geospatial/MPSZ-2019/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "",
    "text": "#1. Overview"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background-human-mobility-the-movement-of-human-beings-in-space-and-time-reflects-the-spatial-temporal-characteristics-of-human-behavior.-with-the-advancement-information-and-communication-technologies-ict-especially-smart-phone-a-large-volume-of-data-related-to-human-mobility-have-been-collected.-by-using-appropriate-gis-analysis-methods-these-data-are-potentially-useful-in-supporting-smart-city-planning-and-management.",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#background-human-mobility-the-movement-of-human-beings-in-space-and-time-reflects-the-spatial-temporal-characteristics-of-human-behavior.-with-the-advancement-information-and-communication-technologies-ict-especially-smart-phone-a-large-volume-of-data-related-to-human-mobility-have-been-collected.-by-using-appropriate-gis-analysis-methods-these-data-are-potentially-useful-in-supporting-smart-city-planning-and-management.",
    "title": "Take-home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "1.1 Background Human mobility, the movement of human beings in space and time, reflects the spatial-temporal characteristics of human behavior. With the advancement Information and Communication Technologies (ICT) especially smart phone, a large volume of data related to human mobility have been collected. By using appropriate GIS analysis methods, these data are potentially useful in supporting smart city planning and management.",
    "text": "1.1 Background Human mobility, the movement of human beings in space and time, reflects the spatial-temporal characteristics of human behavior. With the advancement Information and Communication Technologies (ICT) especially smart phone, a large volume of data related to human mobility have been collected. By using appropriate GIS analysis methods, these data are potentially useful in supporting smart city planning and management.\nIn Singapore, one of the important source of data related to human mobility is from Land Transport Authority (LTA) DataMall. Two data sets related to human mobility are provided by the portal, they are: Passenger Volume by Origin Destination Train Stations and Passenger Volume by Origin Destination Bus Stops. One of the limitation of these data sets is that their location are biased to either bus stops or MRT/LRT stations. In 2020, another very interesting human mobility data set called Grab Posisi was released by GRAB, one of the largest shared taxi operator in South-east Asia. There are two data sets been released and one of them is for Singapore."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#objectives",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#objectives",
    "title": "Take-home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "1.2 Objectives",
    "text": "1.2 Objectives\nGeospatial analytics hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate spatial point patterns analysis methods to discover the geographical and spatio-temporal distribution of Grab hailing services locations in Singapore."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tasks",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tasks",
    "title": "Take-home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "1.3 Tasks",
    "text": "1.3 Tasks\nThe specific tasks of this take-home exercise are as follows:\n\nUsing appropriate function of sf and tidyverse, preparing the following geospatial data layer in sf tibble data.frames:\n\nGrab taxi location points either by origins or destinations.\nRoad layer within Singapore excluding outer islands.\nSingapore boundary layer excluding outer islands\n\nUsing the extracted data, derive traditional Kernel Density Estimation layers.\nUsing the extracted data, derive either Network Kernel Density Estimation (NKDE) or Temporal Network Kernel Density Estimation (TNKDE)\nUsing appropriate tmap functions, display the kernel density layers on openstreetmap of Singapore.\nDescribe the spatial patterns revealed by the kernel density maps."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-datasets",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-datasets",
    "title": "Take-home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "3.1 Loading datasets",
    "text": "3.1 Loading datasets\n\n3.1.1 Grab-Posisi\nWe can load all the Grab-Posisi datasets with this code chunk:\n\nfile_list &lt;- list.files('./data/GrabPosisi')\n\ncombined &lt;- list()\nfor(i in seq(file_list)) {\n  data_name &lt;- paste0('grabposisi', i - 1)\n  temp &lt;- read_parquet(paste0('data/GrabPosisi/', file_list[i]))\n  combined[[i]] &lt;- temp\n}\n\ngrabposisi &lt;- bind_rows(combined)\n\nWhat the code chunk above does, is that it takes in the names of the files in the specified folder, turning it into a list.\nNow, we explore the grabposisi data\n\nglimpse(grabposisi)\n\nRows: 30,329,685\nColumns: 9\n$ trj_id        &lt;chr&gt; \"70014\", \"73573\", \"75567\", \"1410\", \"4354\", \"32630\", \"646…\n$ driving_mode  &lt;chr&gt; \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", …\n$ osname        &lt;chr&gt; \"android\", \"android\", \"android\", \"android\", \"android\", \"…\n$ pingtimestamp &lt;int&gt; 1554943236, 1555582623, 1555141026, 1555731693, 15555844…\n$ rawlat        &lt;dbl&gt; 1.342326, 1.321781, 1.327088, 1.262482, 1.283799, 1.3003…\n$ rawlng        &lt;dbl&gt; 103.8890, 103.8564, 103.8613, 103.8238, 103.8072, 103.90…\n$ speed         &lt;dbl&gt; 18.910000, 17.719076, 14.021548, 13.026521, 14.812943, 2…\n$ bearing       &lt;int&gt; 248, 44, 34, 181, 93, 73, 82, 321, 324, 31, 203, 50, 252…\n$ accuracy      &lt;dbl&gt; 3.900, 4.000, 3.900, 4.000, 3.900, 3.900, 3.000, 3.649, …\n\n\nWe noticed that pingtimestamp is an integer field, so we need to convert pingtimestamp field to a datetime format (POCIXCT)\n\ngrabposisi$pingtimestamp &lt;- as_datetime(grabposisi$pingtimestamp)\n\n\n3.1.1.1 Origin\nNow, we can extract the origin of a ride, based on trajectory id. We will group the rows based on trajectory id, and sort it in ascending order based on the timestamp. The first index of every trajectory id will be the starting point of that ride. After the extraction, we can use use st_as_sf() to convert it into an sf, with the parameter crs=4326 as the dataset is taken from GPS data, which typically uses the WGS-84. However, we need to use st_transform to set the crs to 3414, which is used in Singapore.\n\nsetDT(grabposisi)\n\ngrabposisi[, `:=`(\n  weekday = wday(pingtimestamp),\n  starting_hour = factor(hour(pingtimestamp)),\n  day = factor(mday(pingtimestamp))\n)]\n\norigin &lt;- grabposisi[order(trj_id, pingtimestamp)\n  ][, .SD[1], by = .(trj_id)\n  ] |&gt; st_as_sf(coords=c(\"rawlng\", \"rawlat\"), crs=4326) |&gt; st_transform(3414)\n\nst_crs(origin)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nLet’s filter so that we only have cars in the data\n\norigin &lt;- filter(origin, driving_mode == 'car')\n\nNow, we can see what it looks like\n\nqtm(origin)\n\n\n\n\n\n\n3.1.1.2 Destination\nWe can apply a similar logic to get the destination. The difference is that we need to sort it in descending order based on the timestamp.\n\nsetDT(grabposisi)\n\ngrabposisi[, `:=`(\n  weekday = wday(pingtimestamp),\n  starting_hour = factor(hour(pingtimestamp)),\n  day = factor(mday(pingtimestamp))\n)]\n\ndestination &lt;- grabposisi[order(trj_id, -pingtimestamp)\n  ][, .SD[1], by = .(trj_id)\n  ] |&gt; st_as_sf(coords=c(\"rawlng\", \"rawlat\"), crs=4326) |&gt; st_transform(3414)\n\nst_crs(destination)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nSame as above, we can filter it\n\ndestination &lt;- filter(destination, driving_mode == 'car')\n\nAnd plot it\n\nqtm(destination)\n\n\n\n\n\n\n\n3.1.2 Geospatial Data\n\n3.1.2.1 MPSZ\nNow, we need to load the geospatial data. Let’s start with the 2019 Subzone Master Plan\n\nmpsz2019_sf &lt;- st_read(dsn='data/Geospatial/MPSZ-2019', layer='MPSZ-2019') |&gt; st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\Users\\yozaf\\SMUY3S2\\Geospatial\\IS415-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\Geospatial\\MPSZ-2019' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\nst_crs(mpsz2019_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nAnd see what it looks like on a plot.\n\nqtm(mpsz2019_sf)\n\n\n\n\nNotice that this includes the surrounding islands. To extract only the main island, we can filter out the surrounding islands with this code chunk below. The !grepl() function will find any of the rows that doesn’t include “ISLAND” in their PLN_AREA_N column. You can see the difference between the plots\nNotice that this includes the surrounding islands. To extract only the main island, we can filter out the surrounding islands with this code chunk below\n\nmpsz2019_sf &lt;- mpsz2019_sf[!grepl(\"ISLAND\", mpsz2019_sf$PLN_AREA_N, ignore.case = TRUE), ]\nqtm(mpsz2019_sf)\n\n\n\n\nNow, we can get the outline of Singapore’s main island with st_union()\n\nsg_sf &lt;- mpsz2019_sf |&gt; st_union()\nplot(sg_sf)\n\n\n\n\n\n\n3.1.2.2 Road Data\nAfter the Master Plan, we can move on to the Road Data Set\n\nroad_sf &lt;- st_read(dsn = 'data/Geospatial/malaysia-singapore-brunei-latest-free.shp', layer='gis_osm_roads_free_1') |&gt; st_transform(crs=3414)\n\nReading layer `gis_osm_roads_free_1' from data source \n  `C:\\Users\\yozaf\\SMUY3S2\\Geospatial\\IS415-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\Geospatial\\malaysia-singapore-brunei-latest-free.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1765176 features and 10 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 99.66041 ymin: 0.8021131 xmax: 119.2601 ymax: 7.514393\nGeodetic CRS:  WGS 84\n\nst_crs(road_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\nglimpse(road_sf)\n\nRows: 1,765,176\nColumns: 11\n$ osm_id   &lt;chr&gt; \"4386520\", \"4578273\", \"4579495\", \"4579533\", \"4579534\", \"45795…\n$ code     &lt;int&gt; 5113, 5114, 5122, 5122, 5122, 5122, 5141, 5122, 5122, 5122, 5…\n$ fclass   &lt;chr&gt; \"primary\", \"secondary\", \"residential\", \"residential\", \"reside…\n$ name     &lt;chr&gt; \"Orchard Road\", \"Jalan Bukit Bintang\", \"Jalan Nagasari\", \"Per…\n$ ref      &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ oneway   &lt;chr&gt; \"F\", \"F\", \"B\", \"B\", \"B\", \"F\", \"F\", \"F\", \"F\", \"F\", \"B\", \"B\", \"…\n$ maxspeed &lt;int&gt; 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0,…\n$ layer    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ bridge   &lt;chr&gt; \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"…\n$ tunnel   &lt;chr&gt; \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", \"T\", \"F\", \"F\", \"F\", \"F\", \"F\", \"…\n$ geometry &lt;LINESTRING [m]&gt; LINESTRING (27637.52 32038...., LINESTRING (-20666…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-to-ppp",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-to-ppp",
    "title": "Take-home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "3.2 Converting to PPP",
    "text": "3.2 Converting to PPP\nSince KDE requires the point data to be in ppp format, we will convert our origin and destination to ppp. To do this, we can convert it into a Spatial* object with as_Spatial(), then to an sp object with as(x, ‘SpatialPoints’), then finally to ppp with as(x, ‘ppp’)\n\norigin_spatial &lt;- as_Spatial(origin)\norigin_sp &lt;- as(origin_spatial, 'SpatialPoints')\norigin_ppp &lt;- as(origin_sp, 'ppp')\n\ndestination_spatial &lt;- as_Spatial(destination)\ndestination_sp &lt;- as(destination_spatial, 'SpatialPoints')\ndestination_ppp &lt;- as(destination_sp, 'ppp')\n\n#Alternatively, we can also use the commented codes below to directly convert to ppp\n# origin_ppp &lt;- as.ppp(origin)\n# destination_ppp &lt;- as.ppp(destination)\n\nPlot it to see how it looks like\n\nplot(origin_ppp)\n\n\n\nplot(destination_ppp)\n\n\n\n\nWe can check for duplicates\n\nany(duplicated(origin_ppp))\n\n[1] FALSE\n\nany(duplicated(destination_ppp))\n\n[1] FALSE\n\n\nSince both origin_ppp and destination_ppp doesn’t have duplicates, we can move on to the next step"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-to-owin-object",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-to-owin-object",
    "title": "Take-home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "3.3 Converting to OWIN Object",
    "text": "3.3 Converting to OWIN Object\nWe need to convert our sg_sf, which is the Singapore main island’s outline, to an OWIN object\n\nsg_owin &lt;- as.owin(sg_sf)\nplot(sg_owin)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#combining-point-events-object-and-owin-object",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#combining-point-events-object-and-owin-object",
    "title": "Take-home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "3.5 Combining point events object and OWIN object",
    "text": "3.5 Combining point events object and OWIN object\nBefore performing the analysis, we need to extract only points that are inside Singapore’s main island\n\norigin_sg &lt;- origin_ppp[sg_owin]\ndestination_sg &lt;- destination_ppp[sg_owin]\n\nConvert it to use kilometres as units, since what we have now is in terms of metres\n\norigin_sg_km &lt;- rescale(origin_sg, 1000, 'km')\ndestination_sg_km &lt;- rescale(destination_sg, 1000, 'km')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#first-order-spatial-point-patterns-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#first-order-spatial-point-patterns-analysis",
    "title": "Take-home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "4.1 First Order Spatial Point Patterns Analysis",
    "text": "4.1 First Order Spatial Point Patterns Analysis\n\n4.1.1 KDE with automatic bandwith selection method\nWe will compare computations using these method: - bw.diggle() - bw.CvL() - bw.scott() - bw.ppl()\n\nOrigin\n\nkde_origin_diggle &lt;- density(origin_sg_km,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                              kernel=\"gaussian\")\n\nkde_origin_cvl &lt;- density(origin_sg_km,\n                              sigma=bw.CvL,\n                              edge=TRUE,\n                              kernel=\"gaussian\")\n\n\nkde_origin_scott &lt;- density(origin_sg_km,\n                              sigma=bw.scott,\n                              edge=TRUE,\n                              kernel=\"gaussian\")\n\n\nkde_origin_ppl &lt;- density(origin_sg_km,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                              kernel=\"gaussian\")\n\nNow we can see the plot for comparison\n\npar(mfrow=c(2,2))\nplot(kde_origin_diggle, main = \"bw.diggle\")\nplot(kde_origin_cvl, main = \"bw.cvl\")\nplot(kde_origin_scott, main = \"bw.scott\")\nplot(kde_origin_ppl, main = \"bw.ppl\")\n\n\n\n\n\n\nDestination\n\nkde_destination_diggle &lt;- density(destination_sg_km,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                              kernel=\"gaussian\")\n\nkde_destination_cvl &lt;- density(destination_sg_km,\n                              sigma=bw.CvL,\n                              edge=TRUE,\n                              kernel=\"gaussian\")\n\nkde_destination_scott &lt;- density(destination_sg_km,\n                              sigma=bw.scott,\n                              edge=TRUE,\n                              kernel=\"gaussian\")\n\nkde_destination_ppl &lt;- density(destination_sg_km,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                              kernel=\"gaussian\")\n\nNow we can see the plot for comparison\n\npar(mfrow=c(2,2))\nplot(kde_destination_diggle, main = \"bw.diggle\")\nplot(kde_destination_cvl, main = \"bw.cvl\")\nplot(kde_destination_scott, main = \"bw.scott\")\nplot(kde_destination_ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n\n4.1.2 Adaptive Bandwidth KDE\nThe issue about fixed bandwidth is that less crowded areas, such as countrysides, tends to be less dense compared to more crowded areas like CBDs or city centres. Thus, we can use the adaptive.density() to help overcome this.\n\nkde_origin_adaptive &lt;- adaptive.density(origin_sg_km, method=\"kernel\")\n\nkde_destination_adaptive &lt;- adaptive.density(destination_sg_km, method=\"kernel\")\n\nWe can see the KDE through these plots\n\nplot(kde_origin_adaptive)\n\n\n\n\n\nplot(kde_destination_adaptive)\n\n\n\n\n\n\n4.1.3 Converting KDE Output to Grid Object\nWe can convert the output into a grid object for a more suitable mapping without changing the result\n\ngrid_kde_origin &lt;- as.SpatialGridDataFrame.im(kde_origin_adaptive)\nspplot(grid_kde_origin)\n\n\n\n\n\ngrid_kde_destination &lt;- as.SpatialGridDataFrame.im(kde_destination_adaptive)\nspplot(grid_kde_destination)\n\n\n\n\n\n\n4.1.4 Converting Grid to Raster\nNext, we will conver the grid to a RasterLayer object using the raster() function\n\nkde_origin_raster &lt;- raster(kde_origin_adaptive)\nkde_origin_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4162063, 0.2250614  (x, y)\nextent     : 2.667538, 55.94194, 21.44847, 50.25633  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -1.254928e-14, 2296.831  (min, max)\n\nkde_destination_raster &lt;- raster(kde_destination_adaptive)\nkde_destination_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4162063, 0.2250614  (x, y)\nextent     : 2.667538, 55.94194, 21.44847, 50.25633  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -1.882384e-13, 1996.507  (min, max)\n\n\nSince there is no crs property when we first make a RasterLayer object, we can assign it\n\nprojection(kde_origin_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_origin_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4162063, 0.2250614  (x, y)\nextent     : 2.667538, 55.94194, 21.44847, 50.25633  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -1.254928e-14, 2296.831  (min, max)\n\nprojection(kde_destination_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_destination_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4162063, 0.2250614  (x, y)\nextent     : 2.667538, 55.94194, 21.44847, 50.25633  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -1.882384e-13, 1996.507  (min, max)\n\n\n\n\n4.1.5 Visualization\n\ntm_shape(kde_origin_raster) + \n  tm_raster(\"layer\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\nVariable(s) \"layer\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\ntm_shape(kde_destination_raster) + \n  tm_raster(\"layer\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\nVariable(s) \"layer\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n4.1.6 Testing Spatial Point Patterns Using Clark and Evans Test\n\nOrigin\nThe test hypotheses are:\nHo = The distribution of grab origin points are randomly distributed.\nH1= The distribution of grab origin points are not randomly distributed.\nThe 95% confident interval will be used.\nWe can use the CLark-Evans test of aggregation using clarkevans.test() from statspat\n\norigin_clarkevans &lt;- clarkevans.test(origin_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"))\norigin_clarkevans\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  origin_ppp\nR = 0.21648, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\nThe Clark-Evans test shows an R value that is much smaller than 1. This means that the points are very close to each other, implying that the points are clustered. The p-value also shows that we can reject the null hyphotesis that the distribution of grab origin points are randomly distributed\n\n\nDestination\nThe test hypotheses are:\nHo = The distribution of grab destination points are randomly distributed.\nH1= The distribution of grab destination points are not randomly distributed.\nThe 95% confident interval will be used.\n\ndestination_clarkevans &lt;- clarkevans.test(destination_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"))\ndestination_clarkevans\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  destination_ppp\nR = 0.23392, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\nThe Clark-Evans test shows an R value that is much smaller than 1. This means that the points are very close to each other, implying that the points are clustered. The p-value also shows that we can reject the null hyphotesis that the distribution of grab destination points are randomly distributed"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#network-constrained-spatial-point-pattern-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#network-constrained-spatial-point-pattern-analysis",
    "title": "Take-home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "4.2 Network Constrained Spatial Point Pattern Analysis",
    "text": "4.2 Network Constrained Spatial Point Pattern Analysis\nFor Network Constrained Spatial Point Pattern Analysis, we are taking into account the roads in Singapore.\n\n4.2.1 Preparing Road Objects\nFirst, we prepare an object that contains roads in Singapore. We can use st_within to extract the roads from our dataset from OSM that matches/intersects with the MPSZ. Since we are only looking at roads that is suitable for cars, one way we can do it is by excluding rows where the max speed is 0\n\nsg_road &lt;- road_sf[st_contains(sg_sf, road_sf, sparse = FALSE), ] |&gt; filter(maxspeed &gt; 0)\nqtm(sg_road)\n\n\n\n\n\n\n4.2.2 NKDE for Origin\nFirst, let’s see how it looks like\n\ntm_shape(sg_road) + tm_lines() +\n  tm_shape(origin) + tm_dots('red', size=0.02)\n\n\n\n\n\n4.2.2.1 Preparing Origin Lixels and Line Centre Points\nWe will also extract the origin to include only those who are inside the Singapore main island’s boundary\n\norigin_events &lt;- origin[st_contains(sg_sf, origin, sparse = FALSE), ]\norigin_events &lt;- data.frame(origin_events$trj_id, origin_events$geometry) |&gt; st_as_sf(crs=3414)\nst_crs(origin_events)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nBefore performing NKDE, we need to cut the sg_road into lixels. In this example, our lixels will have a length of 700 and minimum length of 350\n\norigin_lixels &lt;- lixelize_lines(sg_road, \n                         700, \n                         mindist = 350)\n\n\norigin_samples &lt;- lines_center(origin_lixels)\n\n\n\n4.2.2.2 Performing NKDE\nWe will be using nkde.mc(), instead of the usual nkde(). The difference between the two functions is that when paired with the future package, nkde.mc allows for multiple workers to compute the nkde at the same time. We will also set the agg value to 20, which means that points within 20 metres of each other will be aggregrated. The grid_shape will also be set to c(16, 16) to indicate that we are splitting the data to a 16x16 grid that will be computated separately and combined together in the end. All these steps will help in making the runtime of the code a bit faster compared to using the usual default setup.\n\nfuture::plan(future::multisession(workers=4))\n\n\norigin_densities &lt;- nkde.mc(sg_road, \n                      events = origin_events,\n                      w = rep(1,nrow(origin_events)),\n                      samples = origin_samples,\n                      kernel_name = \"quartic\",\n                      bw = 300,\n                      adaptive = TRUE, # we use here an adaptive bandwidth\n                      trim_bw = 600, # the maximum local values of bandwidth will be 600m\n                      div= \"bw\",\n                      method = \"simple\", \n                      digits = 1, \n                      tol = 1,\n                      grid_shape = c(16,16), \n                      max_depth = 8,\n                      agg = 20,\n                      sparse = TRUE,\n                      verbose = FALSE)\n\nif (!inherits(future::plan(), \"sequential\")) future::plan(future::sequential)\n\n\n\n4.2.2.3 Insert Densities to Lixel and Sample\nAfter finishing the computation, we need to put the density value into the samples and lixels. Don’t forget to adjust the scale to kilometer\n\norigin_samples$density &lt;- origin_densities$k\norigin_lixels$density &lt;- origin_densities$k\n\norigin_samples$density &lt;- origin_samples$density*1000\norigin_lixels$density &lt;- origin_lixels$density*1000\n\n\n\n4.2.2.4 Visualization\nWe can use tmaps to visualize the result of our NKDE\n\ntm_shape(origin_lixels)+\n  tm_lines()+\ntm_shape(origin_samples)+\n  tm_dots(\"density\", style=\"kmeans\", palette=\"GnBu\", n=7, size=0.2)\n\n\n\n\n4.2.3 NKDE for Destination\nFor destination, we are doing the exact same process, but changing the event points to the destination points. To get the NKDE for Destination points, simply use the code for the Origin points, but change the dataset to the Destination dataset."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#defining-a-kernel-density-map-function",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#defining-a-kernel-density-map-function",
    "title": "Take-home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "5.1 Defining a Kernel Density Map Function",
    "text": "5.1 Defining a Kernel Density Map Function\nFirst, we can create a function called density_map, which can be called later on to visualize our maps.\n\ndensity_map &lt;- function(raster_object, map_title) {\n  tm_basemap(\"OpenStreetMap\") +\ntm_shape(raster_object) +\n  tm_raster(\"layer\", alpha=0.65) + \n  tm_layout(legend.position = c(\"right\", \"bottom\"), \n            legend.height = 0.5, \n            legend.width = 0.4,\n            main.title = map_title,\n            main.title.position = 'center',\n            main.title.size = 1,\n            frame = FALSE)\n  }"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plotting-density-map",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plotting-density-map",
    "title": "Take-home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "5.2 Plotting Density Map",
    "text": "5.2 Plotting Density Map\nTo plot our density map, we can coll on the density_map function we defined before\n\norigin_density_map &lt;- density_map(kde_origin_raster, \"GrabPosisi Origin\")\norigin_density_map\n\nVariable(s) \"layer\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\ndestination_density_map &lt;- density_map(kde_destination_raster, \"GrabPosisi Destination\")\ndestination_density_map\n\nVariable(s) \"layer\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#saving-data-to-rds",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#saving-data-to-rds",
    "title": "Take-home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "Saving data to RDS",
    "text": "Saving data to RDS\nWe can use write_rds() to save our loaded data into an RDS file, making it easier to reload any data we might need again\n\nwrite_rds(origin, 'data/rds/origin.rds')\nwrite_rds(destination, 'data/rds/destination.rds')\nwrite_rds(road_sf, 'data/rds/road_sf.rds')\nwrite_rds(mpsz2019_sf, 'data/rds/mpsz2019_sf.rds')\nwrite_rds(origin_lixels, 'data/rds/origin_lixels.rds')\nwrite_rds(destination_lixels, 'data/rds/destination_lixels.rds')\nwrite_rds(origin_samples, 'data/rds/origin_samples.rds')\nwrite_rds(destination_samples, 'data/rds/destination_samples.rds')\nwrite_rds(sg_road, 'data/rds/sg_road.rds')\nwrite_rds(origin_densities, 'data/rds/origin_densities.rds')\nwrite_rds(destination_densities, 'data/rds/destination_densities.rds')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-data-from-rds",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-data-from-rds",
    "title": "Take-home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore",
    "section": "Loading data from RDS",
    "text": "Loading data from RDS\nWe can use read_rds() to reload any saved RDS file\n\norigin &lt;- read_rds('data/rds/origin.rds')\ndestination &lt;- read_rds('data/rds/destination.rds')\nroad_sf &lt;- read_rds('data/rds/road_sf.rds')\nmpsz2019_sf &lt;- read_rds('data/rds/mpsz2019_sf.rds')\nsg_sf &lt;- read_rds('data/rds/sg_sf.rds')\norigin_densities &lt;- read_rds('data/rds/origin_densities.rds')\ndestination_densities &lt;- read_rds('data/rds/destination_densities.rds')\norigin_lixels &lt;- read_rds('data/rds/origin_lixels.rds')\ndestination_lixels &lt;- read_rds('data/rds/destination_lixels.rds')\norigin_samples &lt;- read_rds('data/rds/origin_samples.rds')\ndestination_samples &lt;- read_rds('data/rds/destination_samples.rds')"
  }
]